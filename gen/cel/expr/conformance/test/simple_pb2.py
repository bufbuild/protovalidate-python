# Copyright 2023-2025 Buf Technologies, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: cel/expr/conformance/test/simple.proto
# Protobuf Python Version: 6.30.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    30,
    1,
    '',
    'cel/expr/conformance/test/simple.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from cel.expr import checked_pb2 as cel_dot_expr_dot_checked__pb2
from cel.expr import eval_pb2 as cel_dot_expr_dot_eval__pb2
from cel.expr import value_pb2 as cel_dot_expr_dot_value__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n&cel/expr/conformance/test/simple.proto\x12\x19\x63\x65l.expr.conformance.test\x1a\x16\x63\x65l/expr/checked.proto\x1a\x13\x63\x65l/expr/eval.proto\x1a\x14\x63\x65l/expr/value.proto\"\x8e\x01\n\x0eSimpleTestFile\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12 \n\x0b\x64\x65scription\x18\x02 \x01(\tR\x0b\x64\x65scription\x12\x46\n\x07section\x18\x03 \x03(\x0b\x32,.cel.expr.conformance.test.SimpleTestSectionR\x07section\"\x84\x01\n\x11SimpleTestSection\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12 \n\x0b\x64\x65scription\x18\x02 \x01(\tR\x0b\x64\x65scription\x12\x39\n\x04test\x18\x03 \x03(\x0b\x32%.cel.expr.conformance.test.SimpleTestR\x04test\"\xdd\x06\n\nSimpleTest\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12 \n\x0b\x64\x65scription\x18\x02 \x01(\tR\x0b\x64\x65scription\x12\x12\n\x04\x65xpr\x18\x03 \x01(\tR\x04\x65xpr\x12%\n\x0e\x64isable_macros\x18\x04 \x01(\x08R\rdisableMacros\x12#\n\rdisable_check\x18\x05 \x01(\x08R\x0c\x64isableCheck\x12\x1d\n\ncheck_only\x18\x0f \x01(\x08R\tcheckOnly\x12)\n\x08type_env\x18\x06 \x03(\x0b\x32\x0e.cel.expr.DeclR\x07typeEnv\x12\x1c\n\tcontainer\x18\r \x01(\tR\tcontainer\x12\x16\n\x06locale\x18\x0e \x01(\tR\x06locale\x12O\n\x08\x62indings\x18\x07 \x03(\x0b\x32\x33.cel.expr.conformance.test.SimpleTest.BindingsEntryR\x08\x62indings\x12\'\n\x05value\x18\x08 \x01(\x0b\x32\x0f.cel.expr.ValueH\x00R\x05value\x12K\n\x0ctyped_result\x18\x10 \x01(\x0b\x32&.cel.expr.conformance.test.TypedResultH\x00R\x0btypedResult\x12\x33\n\neval_error\x18\t \x01(\x0b\x32\x12.cel.expr.ErrorSetH\x00R\tevalError\x12T\n\x0f\x61ny_eval_errors\x18\n \x01(\x0b\x32*.cel.expr.conformance.test.ErrorSetMatcherH\x00R\ranyEvalErrors\x12\x30\n\x07unknown\x18\x0b \x01(\x0b\x32\x14.cel.expr.UnknownSetH\x00R\x07unknown\x12Q\n\x0c\x61ny_unknowns\x18\x0c \x01(\x0b\x32,.cel.expr.conformance.test.UnknownSetMatcherH\x00R\x0b\x61nyUnknowns\x1aP\n\rBindingsEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12)\n\x05value\x18\x02 \x01(\x0b\x32\x13.cel.expr.ExprValueR\x05value:\x02\x38\x01\x42\x10\n\x0eresult_matcher\"i\n\x0bTypedResult\x12\'\n\x06result\x18\x01 \x01(\x0b\x32\x0f.cel.expr.ValueR\x06result\x12\x31\n\x0c\x64\x65\x64uced_type\x18\x02 \x01(\x0b\x32\x0e.cel.expr.TypeR\x0b\x64\x65\x64ucedType\"=\n\x0f\x45rrorSetMatcher\x12*\n\x06\x65rrors\x18\x01 \x03(\x0b\x32\x12.cel.expr.ErrorSetR\x06\x65rrors\"E\n\x11UnknownSetMatcher\x12\x30\n\x08unknowns\x18\x01 \x03(\x0b\x32\x14.cel.expr.UnknownSetR\x08unknownsB\xd6\x01\n\x1d\x63om.cel.expr.conformance.testB\x0bSimpleProtoP\x01Z\x1d\x63\x65l.dev/expr/conformance/test\xf8\x01\x01\xa2\x02\x04\x43\x45\x43T\xaa\x02\x19\x43\x65l.Expr.Conformance.Test\xca\x02\x19\x43\x65l\\Expr\\Conformance\\Test\xe2\x02%Cel\\Expr\\Conformance\\Test\\GPBMetadata\xea\x02\x1c\x43\x65l::Expr::Conformance::Testb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'cel.expr.conformance.test.simple_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\035com.cel.expr.conformance.testB\013SimpleProtoP\001Z\035cel.dev/expr/conformance/test\370\001\001\242\002\004CECT\252\002\031Cel.Expr.Conformance.Test\312\002\031Cel\\Expr\\Conformance\\Test\342\002%Cel\\Expr\\Conformance\\Test\\GPBMetadata\352\002\034Cel::Expr::Conformance::Test'
  _globals['_SIMPLETEST_BINDINGSENTRY']._loaded_options = None
  _globals['_SIMPLETEST_BINDINGSENTRY']._serialized_options = b'8\001'
  _globals['_SIMPLETESTFILE']._serialized_start=137
  _globals['_SIMPLETESTFILE']._serialized_end=279
  _globals['_SIMPLETESTSECTION']._serialized_start=282
  _globals['_SIMPLETESTSECTION']._serialized_end=414
  _globals['_SIMPLETEST']._serialized_start=417
  _globals['_SIMPLETEST']._serialized_end=1278
  _globals['_SIMPLETEST_BINDINGSENTRY']._serialized_start=1180
  _globals['_SIMPLETEST_BINDINGSENTRY']._serialized_end=1260
  _globals['_TYPEDRESULT']._serialized_start=1280
  _globals['_TYPEDRESULT']._serialized_end=1385
  _globals['_ERRORSETMATCHER']._serialized_start=1387
  _globals['_ERRORSETMATCHER']._serialized_end=1448
  _globals['_UNKNOWNSETMATCHER']._serialized_start=1450
  _globals['_UNKNOWNSETMATCHER']._serialized_end=1519
# @@protoc_insertion_point(module_scope)
