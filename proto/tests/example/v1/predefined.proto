// Copyright 2023-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package tests.example.v1;

import "buf/validate/validate.proto";

extend buf.validate.MapRules {
    optional uint64 maxim = 1800 [(buf.validate.predefined).cel = {
      id: "map.maxim"
      expression: "uint(this.size()) > 2 ? 'map must be at most %s entries'.format([{1: 'value1', uint(2): 'keytruda', true: double('NaN')}]) : ''"
    }];
    optional uint64 maxim2 = 1801 [(buf.validate.predefined).cel = {
      id: "map.maxim"
      expression: "uint(this.size()) > 2 ? 'map must be at most %s entries'.format([{1: 'value1', uint(2): 'keytruda'}]) : ''"
    }];
    optional uint64 maxim3 = 1802 [(buf.validate.predefined).cel = {
      id: "map.maxim"
      expression: "uint(this.size()) > 2 ? 'map must be at most %s entries'.format([{uint(2): 'keytruda', true: double('NaN')}]) : ''"
    }];
    optional uint64 maxim4 = 1803 [(buf.validate.predefined).cel = {
      id: "map.maxim"
      expression: "uint(this.size()) > 2 ? 'map must be at most %s entries'.format([{1: 'value1', true: double('NaN')}]) : ''"
    }];
    optional uint64 maxim5 = 1804 [(buf.validate.predefined).cel = {
      id: "map.maxim"
      expression: "uint(this.size()) > 2 ? 'map must be at most %s entries'.format([{uint(1): 'value1', true: double('NaN')}]) : ''"
    }];
    optional uint64 maxim6 = 1805 [(buf.validate.predefined).cel = {
      id: "map.maxim"
      expression: "uint(this.size()) > 2 ? 'map must be at most %s entries'.format([{uint(6): 'value1', true: double('NaN')}]) : ''"
    }];
    optional uint64 maxim7 = 1806 [(buf.validate.predefined).cel = {
      id: "map.maxim"
      expression: "uint(this.size()) > 2 ? 'map must be at most %s entries'.format([{6: 'value1', true: double('NaN')}]) : ''"
    }];
    optional uint64 maxim8 = 1807 [(buf.validate.predefined).cel = {
      id: "map.maxim"
      expression: "uint(this.size()) > 2 ? 'map must be at most %s entries'.format([{2: 'value1', true: double('NaN')}]) : ''"
    }];
    optional uint64 maxim9 = 1808 [(buf.validate.predefined).cel = {
      id: "map.maxim"
      expression: "uint(this.size()) > 2 ? 'map must be at most %s entries'.format([{0: 'value1', false: double('NaN')}]) : ''"
    }];
}

// 4, 5, 1 don't work

